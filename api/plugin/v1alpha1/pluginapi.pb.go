// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/plugin/v1alpha1/pluginapi.proto

package v1alpha1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterPluginRequest struct {
	// Uniq name of the plugin
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Plugin server socket address to register;
	// This server has to offers Plugin functionality
	// at this socket. The socket must be an UNIX filesystem path.
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterPluginRequest) Reset()         { *m = RegisterPluginRequest{} }
func (m *RegisterPluginRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterPluginRequest) ProtoMessage()    {}
func (*RegisterPluginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b781b148405a63, []int{0}
}

func (m *RegisterPluginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterPluginRequest.Unmarshal(m, b)
}
func (m *RegisterPluginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterPluginRequest.Marshal(b, m, deterministic)
}
func (m *RegisterPluginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterPluginRequest.Merge(m, src)
}
func (m *RegisterPluginRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterPluginRequest.Size(m)
}
func (m *RegisterPluginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterPluginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterPluginRequest proto.InternalMessageInfo

func (m *RegisterPluginRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegisterPluginRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type RegisterKeyServerReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterKeyServerReply) Reset()         { *m = RegisterKeyServerReply{} }
func (m *RegisterKeyServerReply) String() string { return proto.CompactTextString(m) }
func (*RegisterKeyServerReply) ProtoMessage()    {}
func (*RegisterKeyServerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b781b148405a63, []int{1}
}

func (m *RegisterKeyServerReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterKeyServerReply.Unmarshal(m, b)
}
func (m *RegisterKeyServerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterKeyServerReply.Marshal(b, m, deterministic)
}
func (m *RegisterKeyServerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterKeyServerReply.Merge(m, src)
}
func (m *RegisterKeyServerReply) XXX_Size() int {
	return xxx_messageInfo_RegisterKeyServerReply.Size(m)
}
func (m *RegisterKeyServerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterKeyServerReply.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterKeyServerReply proto.InternalMessageInfo

type GetCASecretRequest struct {
	// CA signer name
	SignerName string `protobuf:"bytes,1,opt,name=signerName,proto3" json:"signerName,omitempty"`
	// base64 encoded public key used for generating the quote
	PublicKey []byte `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	// base64 encoded SGX Quote
	Quote                []byte   `protobuf:"bytes,3,opt,name=quote,proto3" json:"quote,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCASecretRequest) Reset()         { *m = GetCASecretRequest{} }
func (m *GetCASecretRequest) String() string { return proto.CompactTextString(m) }
func (*GetCASecretRequest) ProtoMessage()    {}
func (*GetCASecretRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b781b148405a63, []int{2}
}

func (m *GetCASecretRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCASecretRequest.Unmarshal(m, b)
}
func (m *GetCASecretRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCASecretRequest.Marshal(b, m, deterministic)
}
func (m *GetCASecretRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCASecretRequest.Merge(m, src)
}
func (m *GetCASecretRequest) XXX_Size() int {
	return xxx_messageInfo_GetCASecretRequest.Size(m)
}
func (m *GetCASecretRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCASecretRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCASecretRequest proto.InternalMessageInfo

func (m *GetCASecretRequest) GetSignerName() string {
	if m != nil {
		return m.SignerName
	}
	return ""
}

func (m *GetCASecretRequest) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *GetCASecretRequest) GetQuote() []byte {
	if m != nil {
		return m.Quote
	}
	return nil
}

type GetCASecretReply struct {
	// The CA private key(PWK) is wrapped with a symmetric key(SWK)
	// that was wrapped with the given publicKey. Both the SWK and
	// PWK are concatenated and returned as single base64 encoded block.
	WrappedKey []byte `protobuf:"bytes,1,opt,name=wrappedKey,proto3" json:"wrappedKey,omitempty"`
	// base64 encoded PEM certificate
	Certificate          []byte   `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCASecretReply) Reset()         { *m = GetCASecretReply{} }
func (m *GetCASecretReply) String() string { return proto.CompactTextString(m) }
func (*GetCASecretReply) ProtoMessage()    {}
func (*GetCASecretReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b781b148405a63, []int{3}
}

func (m *GetCASecretReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCASecretReply.Unmarshal(m, b)
}
func (m *GetCASecretReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCASecretReply.Marshal(b, m, deterministic)
}
func (m *GetCASecretReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCASecretReply.Merge(m, src)
}
func (m *GetCASecretReply) XXX_Size() int {
	return xxx_messageInfo_GetCASecretReply.Size(m)
}
func (m *GetCASecretReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCASecretReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetCASecretReply proto.InternalMessageInfo

func (m *GetCASecretReply) GetWrappedKey() []byte {
	if m != nil {
		return m.WrappedKey
	}
	return nil
}

func (m *GetCASecretReply) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterPluginRequest)(nil), "v1alpha1.RegisterPluginRequest")
	proto.RegisterType((*RegisterKeyServerReply)(nil), "v1alpha1.RegisterKeyServerReply")
	proto.RegisterType((*GetCASecretRequest)(nil), "v1alpha1.GetCASecretRequest")
	proto.RegisterType((*GetCASecretReply)(nil), "v1alpha1.GetCASecretReply")
}

func init() {
	proto.RegisterFile("api/plugin/v1alpha1/pluginapi.proto", fileDescriptor_a2b781b148405a63)
}

var fileDescriptor_a2b781b148405a63 = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x5d, 0x4b, 0xc3, 0x40,
	0x10, 0xb4, 0x7e, 0xd4, 0x76, 0x2b, 0x22, 0x8b, 0x4a, 0x08, 0x45, 0x43, 0x7c, 0xf1, 0x29, 0xa5,
	0xf5, 0x17, 0xa8, 0x88, 0x48, 0x41, 0x24, 0xd1, 0x17, 0xdf, 0xae, 0xc9, 0x9a, 0x1e, 0xc4, 0xe4,
	0xba, 0xb9, 0x54, 0xf2, 0xef, 0xa5, 0xd7, 0xc4, 0xa4, 0x56, 0xdf, 0x6e, 0x67, 0xe6, 0x66, 0xd8,
	0x59, 0xb8, 0x12, 0x4a, 0x8e, 0x54, 0x52, 0xc4, 0x32, 0x1d, 0x2d, 0xc7, 0x22, 0x51, 0x73, 0x31,
	0xae, 0x66, 0xa1, 0xa4, 0xa7, 0x38, 0xd3, 0x19, 0xf6, 0x6a, 0xc6, 0x7d, 0x80, 0x33, 0x9f, 0x62,
	0x99, 0x6b, 0xe2, 0x17, 0x23, 0xf2, 0x69, 0x51, 0x50, 0xae, 0x11, 0x61, 0x3f, 0x15, 0x9f, 0x64,
	0x75, 0x9c, 0xce, 0x75, 0xdf, 0x37, 0x6f, 0xb4, 0xe0, 0x50, 0x44, 0x11, 0x53, 0x9e, 0x5b, 0xbb,
	0x06, 0xae, 0x47, 0xd7, 0x82, 0xf3, 0xda, 0x66, 0x4a, 0x65, 0x40, 0xbc, 0x24, 0xf6, 0x49, 0x25,
	0xa5, 0x3b, 0x07, 0x7c, 0x24, 0x7d, 0x7f, 0x1b, 0x50, 0xc8, 0xa4, 0x6b, 0xf7, 0x0b, 0x80, 0x5c,
	0xc6, 0x29, 0xf1, 0x73, 0x93, 0xd1, 0x42, 0x70, 0x08, 0x7d, 0x55, 0xcc, 0x12, 0x19, 0x4e, 0xa9,
	0x34, 0x59, 0x47, 0x7e, 0x03, 0xe0, 0x29, 0x1c, 0x2c, 0x8a, 0x4c, 0x93, 0xb5, 0x67, 0x98, 0xf5,
	0xe0, 0xbe, 0xc2, 0xc9, 0x46, 0x92, 0x4a, 0xca, 0x55, 0xce, 0x17, 0x0b, 0xa5, 0x28, 0x5a, 0x19,
	0x75, 0x8c, 0xbc, 0x85, 0xa0, 0x03, 0x83, 0x90, 0x58, 0xcb, 0x0f, 0x19, 0x0a, 0x4d, 0x55, 0x52,
	0x1b, 0x9a, 0x08, 0xe8, 0xad, 0x37, 0xe3, 0x12, 0xdf, 0xe0, 0x78, 0xb3, 0x2c, 0xbc, 0xf4, 0xea,
	0x26, 0xbd, 0x3f, 0x6b, 0xb4, 0x9d, 0x6d, 0xc1, 0xaf, 0x82, 0x76, 0x26, 0x01, 0x74, 0x2b, 0xbb,
	0x27, 0x18, 0xb4, 0x56, 0xc0, 0x61, 0xf3, 0x79, 0xbb, 0x43, 0xdb, 0xfe, 0x87, 0x35, 0xa6, 0x77,
	0xf0, 0xfe, 0x73, 0xe4, 0x59, 0xd7, 0x5c, 0xfd, 0xe6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xb1, 0xf3,
	0x2b, 0x92, 0x1c, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryClient interface {
	RegisterPlugin(ctx context.Context, in *RegisterPluginRequest, opts ...grpc.CallOption) (*RegisterKeyServerReply, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) RegisterPlugin(ctx context.Context, in *RegisterPluginRequest, opts ...grpc.CallOption) (*RegisterKeyServerReply, error) {
	out := new(RegisterKeyServerReply)
	err := c.cc.Invoke(ctx, "/v1alpha1.Registry/RegisterPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServer is the server API for Registry service.
type RegistryServer interface {
	RegisterPlugin(context.Context, *RegisterPluginRequest) (*RegisterKeyServerReply, error)
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_RegisterPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).RegisterPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.Registry/RegisterPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).RegisterPlugin(ctx, req.(*RegisterPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha1.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPlugin",
			Handler:    _Registry_RegisterPlugin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/plugin/v1alpha1/pluginapi.proto",
}

// PluginClient is the client API for Plugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PluginClient interface {
	// GetCASecret retrieves the stored CA key and certificate at the key-manager
	// for given signer signerName.
	// On success, returns the key and certificate.
	// Otherwise, appropriate error gets returned.
	GetCASecret(ctx context.Context, in *GetCASecretRequest, opts ...grpc.CallOption) (*GetCASecretReply, error)
}

type pluginClient struct {
	cc *grpc.ClientConn
}

func NewPluginClient(cc *grpc.ClientConn) PluginClient {
	return &pluginClient{cc}
}

func (c *pluginClient) GetCASecret(ctx context.Context, in *GetCASecretRequest, opts ...grpc.CallOption) (*GetCASecretReply, error) {
	out := new(GetCASecretReply)
	err := c.cc.Invoke(ctx, "/v1alpha1.Plugin/GetCASecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServer is the server API for Plugin service.
type PluginServer interface {
	// GetCASecret retrieves the stored CA key and certificate at the key-manager
	// for given signer signerName.
	// On success, returns the key and certificate.
	// Otherwise, appropriate error gets returned.
	GetCASecret(context.Context, *GetCASecretRequest) (*GetCASecretReply, error)
}

func RegisterPluginServer(s *grpc.Server, srv PluginServer) {
	s.RegisterService(&_Plugin_serviceDesc, srv)
}

func _Plugin_GetCASecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCASecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).GetCASecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.Plugin/GetCASecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).GetCASecret(ctx, req.(*GetCASecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Plugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha1.Plugin",
	HandlerType: (*PluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCASecret",
			Handler:    _Plugin_GetCASecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/plugin/v1alpha1/pluginapi.proto",
}
